// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// Other than the clerkId, we avoid duplicating any user or organization information from Clerk into the database 
// such that we do not have to watch for updates to the Clerk data (in the webhooks) to keep the database in sync

model User {
  clerkId          String         @id
  createdAt        DateTime       @default(now())
  memberships      GroupMembership[]
}

model Organization {
  clerkId          String         @id
  createdAt        DateTime       @default(now())
  groups           Group[]
}

model Group {
  id               String         @id @default(uuid())
  createdAt        DateTime       @default(now())
  updatedAt        DateTime       @updatedAt
  orgId            String
  org              Organization   @relation(fields: [orgId], references: [clerkId], onDelete: Cascade)
  name             String
  slug             String
  logoUrl          String?
  memberships      GroupMembership[]
  posts            Post[]
  
  @@unique([orgId, slug])
}

model GroupMembership {
  id               String         @id @default(uuid())
  createdAt        DateTime       @default(now())
  updatedAt        DateTime       @updatedAt
  userId           String
  user             User           @relation(fields: [userId], references: [clerkId], onDelete: Cascade)
  groupId          String
  group            Group          @relation(fields: [groupId], references: [id], onDelete: Cascade)
  role             String

  @@unique([userId, groupId])
}

model Post { 
  id               String         @id @default(uuid())
  createdAt        DateTime       @default(now())
  updatedAt        DateTime       @updatedAt
  title            String 
  content          String? 
  published        Boolean        @default(false)
  groupId          String 
  group            Group          @relation(fields: [groupId], references: [id], onDelete: Cascade)
}
